<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>你好，我是英强 on 英强的博客</title>
    <link>https://cevin15.github.io/</link>
    <description>Recent content in 你好，我是英强 on 英强的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Dec 2021 20:05:43 +0800</lastBuildDate><atom:link href="https://cevin15.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 小技巧(持续更新)【置顶】</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Sat, 26 Sep 2020 13:24:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid>
      <description>Linux 小技巧(持续更新)#2020-09-26 13:24
 使用软连接将nginx 作为系统命令。其他软件命令同理  ln /usr/local/nginx/sbin/nginx /usr/sbin/nginx查看系统版本  cat /etc/issue查看CPU核数  cat /proc/cpuinfo |grep &amp;quot;cpu cores&amp;quot;|uniq查看内存  cat /proc/meminfo |grep MemTotal 定时任务crontab
 当前的定时任务 crontab -l 编辑定时任务 crontab -e    tar 文件分割与合并
  分割
split -b 40M -d -a 2 test.tar.gz test.tar.gz. 参数含义： -b：指定每个文件的大小，单位可以为B、K、M ； -d：使用数字而不是字母作为后缀名 ； -a：后缀名长度，默认为2；
 ​	合并
cat test.tar.gz.* &amp;gt; test_new.tar.gz 删除find 出来的文件</description>
    </item>
    
    <item>
      <title>使用Keepalived 实现Nginx 双机热备</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/%E4%BD%BF%E7%94%A8_Keepalived_%E5%AE%9E%E7%8E%B0_Nginx_%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/</link>
      <pubDate>Wed, 01 Dec 2021 20:05:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/%E4%BD%BF%E7%94%A8_Keepalived_%E5%AE%9E%E7%8E%B0_Nginx_%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/</guid>
      <description>使用Keepalived 实现Nginx 双机热备#2021-12-01 20:05
Nginx 安装#首先准备两台服务器，上面均部署Nginx。
参考这里Linux 的 Nginx 安装【转】
Keepalived 安装#yum install -y keepalived Keepalived 配置#简单模式#目录 /etc/keepalived/keepalived.conf
! Configuration File for keepalived global_defs { #路由id，全局唯一，表示当前keepalived节点的唯一性 router_id keep_15 } vrrp_instance VI_1 { #设置当前实例状态为MASTER。MASTER代表是主实例，BACKUP代表是备用实例 state BACKUP #当前实例绑定的网卡 interface eth0 #当前实例的虚拟路由id，一组主备的实例的路由id是相同的 virtual_router_id 101 #当前实例的优先级 priority 100 #主备之间同步检查时间间隔 advert_int 1 #一组主备实例的认证密码，方式非法节点进入路由组 authentication { auth_type PASS auth_pass 123456Qw } #设置当前实例的虚拟IP virtual_ipaddress { 192.</description>
    </item>
    
    <item>
      <title>Linux 防火墙 Firewalld 使用过的经验</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E9%98%B2%E7%81%AB%E5%A2%99_Firewalld_%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Thu, 01 Apr 2021 15:46:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E9%98%B2%E7%81%AB%E5%A2%99_Firewalld_%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid>
      <description>Linux 防火墙 Firewalld 使用过的经验#2021-04-01 15:46
目前使用经验适用于CentOS 7+，Redhat 7+
有些系统没有默认安装Firewalld，可以使用yum进行安装：yum install -y firewalld
Firewalld 状态查询
[root@Genl-gm-4885 ~]# firewall-cmd --state not running Firewalld 启用，关闭等等命令
systemctl start firewalld //启动 systemctl stop firewalld //停用 systemctl enable firewalld //设置Firewalld自启动 systemctl disable firewalld //设置Firewalld不自启动 PS. 查看系统自启动服务
systemctl list-unit-files|grep enabled Firewalld 使用了zone的一个概念，通过设置zone 可以快速设置防火墙的规则。
使用firewall-cmd --get-zones 获取zone列表
block dmz drop external home internal public trusted work 默认的zone 是public。拒绝所有的连接请求，除了dhcp和ssh。
zone=trusted 则相反，为接受所有请求。
获取当前使用的zones
firewall-cmd --get-active-zones	切换到别的zone
firewall-cmd --zone=trusted --change-interface=#{网卡名，如eth190} Firewalld 的连接规则有三类：</description>
    </item>
    
    <item>
      <title>Kubernetes 与 Docker 使用经验</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Kubernetes_%E4%B8%8EDocker_%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Wed, 29 Sep 2021 13:43:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Kubernetes_%E4%B8%8EDocker_%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid>
      <description>Kubernetes 与 Docker 使用经验#2021-09-29 13:43
使用docker login 登录私有仓库#docker login --username=${用户名} ${私有仓库地址}Docker会将token存储在~/.docker/config.json文件中，从而作为拉取私有镜像的凭证。
推送docker镜像到私有仓库#先打上私有仓库的标签
docker tag demo:0.0.1 ${私有仓库地址}/demo:0.0.1推送
docker push ${私有仓库地址}/demo:0.0.1kubernetes 拉取私有仓库镜像#生成私有仓库secret
kubectl create secret docker-registry ${secret名} --docker-server=${私有仓库地址} --docker-username=${用户名} --docker-password=${用户密码} --docker-email=${用户邮箱}yaml 文件拉取镜像时使用secret
 ## 配置如下spec:containers:- name: demoimage: xxx/demo:0.0.1ports:- containerPort: 8015imagePullSecrets: # 使用secret 拉取私有仓库数据- name: ${secret名} # 上述步骤生成的secret名进入容器内部#kubectl exec -it ${pod name} -- /bin/bashkubernetes 的kubeconfig 文件#kubeconfig 保存为~/.</description>
    </item>
    
    <item>
      <title>Linux 使用chkconfig 实现服务自启动</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E4%BD%BF%E7%94%A8chkconfig_%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Tue, 15 Jun 2021 15:44:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E4%BD%BF%E7%94%A8chkconfig_%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF%E5%8A%A8/</guid>
      <description>Linux 使用chkconfig 实现服务自启动#2021-06-15 15:44
查看服务#chkconfig --list 自定义服务#在/etc/init.d/目录下，添加自定义的脚本文件。
脚本文件有个要注意的地方，需要在文件开头定义如下内容。如果没有，可能会报这个错误：service ${service_name} does not support chkconfig
# chkconfig: 2345 91 89 # description: ${service_name} 第一行表示 chkconfig的规则，2345 启动级别，91 启动优先级，89 关闭优先级（优先级 0-100，值越高优先级越低）
举个例子子，如下为笔者配置的elasticsearch 自启脚本。P.S. 这里使用es 用户来启动elasticsearch。
#! /bin/bash # elasticsearch # chkconfig: 2345 91 89 # description: elasticsearch su - es -c &amp;#34;source /etc/profile &amp;amp;&amp;amp; /usr/es/elasticsearch-6.5.4/bin/elasticsearch -d&amp;#34; 最后，给这个脚本添加执行权限：chmod +x elasticsearch
添加服务#chkconfig --add ${service_name}	如果如上已经配置了2345的启动级别，则默认添加之后就设置了自启动。</description>
    </item>
    
    <item>
      <title>Linux 自定义服务</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 08 Jun 2021 00:18:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</guid>
      <description>Linux 自定义服务#2021-06-08 00:18
晚上抽空学了下在Linux 服务器中自定义service，自定义之后，启动、停止、开机自启动等操作就简单多了。
我们以tomcat 作为我们的例子，目标是将tomcat 自定义为service，并实现开机自启动。
准备工作# 系统版本 CentOS 7.x 配置好JDK，下载Tomcat，并找个目录解压 执行下Tomcat bin目录下的startup.sh，shutdow.sh 命令，确认环境是否正确  Show Time#首先，在目录/usr/lib/systemd/system 中创建一个service文 件：tomcat.service，内容如下：
[Unit] Description=apache tomcat service [Service] Type=simple ExecStart=/usr/local/tomcat/apache-tomcat-10.0.6/bin/auto_startup.sh ExecStop=/usr/local/tomcat/apache-tomcat-10.0.6/bin/auto_shutdown.sh RemainAfterExit=yes [Install] WantedBy=multi-user.target Service 文件中各个节点的含义就不深入讲了（笔者也还只是懂些皮毛），说下两点要注意的。
  没有直接使用Tomcat bin目录下的startup.sh，shutdow.sh 命令，因为会提示JAVA_HOME，JRE_HOME 找不到，所以自定义了两个sh文件，内容如下：
#!/bin/sh source /etc/profile /usr/local/tomcat/apache-tomcat-10.0.6/bin/startup.sh #!/bin/sh source /etc/profile /usr/local/tomcat/apache-tomcat-10.0.6/bin/shutdown.sh 增加了source /etc/profile，先加载了Java的环境变量。
某些时候，还会提示配置文件找不到（如果类中有根据相对路径来查找文件的代码的话），导致Tomcat 启动失败。那我们可以这样来写启动脚本：
#!/bin/sh source /etc/profile cd /usr/local/tomcat/apache-tomcat-10.0.6/bin ./startup.sh   注意RemainAfterExit=yes，未增加该配置之前，执行systemctl start tomcat.</description>
    </item>
    
    <item>
      <title>Nginx 正向代理——让内网服务器支持上网</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Nginx_%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%A9%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%AF%E6%8C%81%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Tue, 15 Dec 2020 17:44:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Nginx_%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%A9%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%AF%E6%8C%81%E4%B8%8A%E7%BD%91/</guid>
      <description>Nginx 正向代理——让内网服务器支持上网#2020-12-15 17:44
假设我们有两台机器A和B，A能上网，B不能上网，B能连通A的某个端口，比如说80，443。在A上安装Nginx，并且通过Nginx的正向代理，达到B能上网的目的。
A机器上的操作#Nginx 编译安装需要增加一个插件 https://github.com/chobits/ngx_http_proxy_connect_module
 在官方的Github上找到合适的ngx_http_proxy_connect_module 插件版本     nginx version enable REWRITE phase patch     1.4.x ~ 1.12.x NO proxy_connect.patch   1.4.x ~ 1.12.x YES proxy_connect_rewrite.patch   1.13.x ~ 1.14.x NO proxy_connect_1014.patch   1.13.x ~ 1.14.x YES proxy_connect_rewrite_1014.patch   1.15.2 YES proxy_connect_rewrite_1015.patch   1.15.4 ~ 1.16.x YES proxy_connect_rewrite_101504.patch   1.</description>
    </item>
    
    <item>
      <title>Linux 配置IPv6网络</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E9%85%8D%E7%BD%AEIPv6%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Wed, 04 Nov 2020 20:26:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E9%85%8D%E7%BD%AEIPv6%E7%BD%91%E7%BB%9C/</guid>
      <description>Linux 配置IPv6网络#2020-11-04 20:26
  修改网卡配置文件
vi /etc/sysconfig/network-scripts/ifcfg-eth1
增加如下配置
IPV6INIT=yes IPV6ADDR=fdff::251:10:254:251:109 IPV6PREFIX=64 IPV6_DEFAULTGW=fdff::251:10:254:251:254 IPV6_AUTOCONF=no IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no   重启网络
service network restart
  一般情况下到这里就差不多了。ifconfig 查看，可以看到已经有IPv6地址了：inet6 addr: fdff::251:10:254:251:109/64 Scope:Global
eth1 Link encap:Ethernet HWaddr 00:50:56:9A:7B:5B inet addr:10.254.251.109 Bcast:10.254.251.255 Mask:255.255.255.0 inet6 addr: fe80::250:56ff:fe9a:7b5b/64 Scope:Link inet6 addr: fdff::251:10:254:251:109/64 Scope:Global 但我这边遇到个问题，本机可以telnet通，但外网一直不行。经过排查，发现还有个IPv6的防火墙未关闭。
 service ip6tables status 查看IPv6 防火墙状态 service ip6tables stop 关闭IPv6 防火墙 chkconfig ip6tables off 永久关闭IPv6防火墙（避免开机自启动）  PS. IPv6 的ping 命令为 ping6，chkconfig --list 查看开机启动项</description>
    </item>
    
    <item>
      <title>VSCode 离线安装插件</title>
      <link>https://cevin15.github.io/docs/%E6%88%91%E7%88%B1%E7%BC%96%E7%A8%8B/VSCode_%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sat, 26 Sep 2020 14:04:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E6%88%91%E7%88%B1%E7%BC%96%E7%A8%8B/VSCode_%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</guid>
      <description>VSCode 离线安装插件#2020-09-26 14:04
 登录官方的插件商城：https://marketplace.visualstudio.com/ 搜索所需要的插件 在插件详情页，下载该插件的安装文件。下载下来一般是vsix文件，比如说这里下载了一个vscjava.vscode-maven-0.24.2.vsix 文件  将该文件拷贝到固定目录，习惯上会存到VSCode 安装目录下的bin目录，比如C:\Users\yangyingqiang\AppData\Local\Programs\Microsoft VS Code\bin 在当前目录下使用终端执行插件安装脚本  code --install-extension vscjava.vscode-maven-0.24.2.vsix看到如下进度提示，即安装成功。  Installing extensions...Extension &#39;vscjava.vscode-maven-0.24.2.vsix&#39; was successfully installed.</description>
    </item>
    
    <item>
      <title>Linux中使用logrotate 切割nginx 日志文件【转】</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E4%BD%BF%E7%94%A8logrotate_%E5%88%87%E5%89%B2nginx_%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 26 Sep 2020 11:12:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E4%BD%BF%E7%94%A8logrotate_%E5%88%87%E5%89%B2nginx_%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</guid>
      <description>Linux中使用logrotate 切割nginx 日志文件【转】#2020-09-26 11:12
Logrotate的介绍#显而易见，Logrotate是基于CRON来运行的，其脚本是「/etc/cron.daily/logrotate」：
#!/bin/sh/usr/sbin/logrotate /etc/logrotate.confEXITVALUE=$?if [ $EXITVALUE != 0 ]; then/usr/bin/logger -t logrotate &amp;quot;ALERT exited abnormally with [$EXITVALUE]&amp;quot;fiexit 0实际运行时，Logrotate会调用配置文件「/etc/logrotate.conf」：
# see &amp;quot;man logrotate&amp;quot; for details# rotate log files weeklyweekly# keep 4 weeks worth of backlogsrotate 4# create new (empty) log files after rotating old onescreate# uncomment this if you want your log files compressed#compress# RPM packages drop log rotation information into this directoryinclude /etc/logrotate.</description>
    </item>
    
    <item>
      <title>Linux的Nginx 安装【转】</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_Nginx%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 26 Sep 2020 09:22:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_Nginx%E5%AE%89%E8%A3%85/</guid>
      <description>Linux的Nginx 安装【转】#2020-09-26 09:22
转载自 Nginx 安装配置 - 菜鸟教程
Nginx#Nginx(&amp;ldquo;engine x&amp;rdquo;)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。
在高连接并发的情况下，Nginx是Apache服务器不错的替代品。
Nginx 安装#一. 安装编译工具及库文件
yum -y install make zlib zlib-devel gcc-c++ libtool 二. 首先要安装 PCRE
PCRE 作用是让 Nginx 支持 Rewrite 功能。
 下载 PCRE 安装包，下载地址： http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz  [root@bogon src]# cd /usr/local/src/ [root@bogon src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz 解压安装包:  [root@bogon src]# tar zxvf pcre-8.35.tar.gz 进入安装包目录  [root@bogon src]# cd pcre-8.</description>
    </item>
    
    <item>
      <title>Linux的虚拟IP设置</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux%E7%9A%84%E8%99%9A%E6%8B%9FIP%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sat, 01 Aug 2020 11:28:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux%E7%9A%84%E8%99%9A%E6%8B%9FIP%E8%AE%BE%E7%BD%AE/</guid>
      <description>Linux的虚拟IP设置#2020-08-01 11:28
在此之前对于虚拟IP的概念一直很模糊。这次，申请了两个服务器，三个IP，其中一个虚拟IP。本来想法是让网络组那边把虚拟IP绑定在F5设备上，然后对这两台服务器做负载均衡。
结果，网络组说这个网络区域没有F5&amp;hellip;那只能自己搞起了。
假设我们的服务器IP是172.23.15.10，虚拟IP为172.23.15.11，网卡名为ens192。网卡名可以通过ifconfig看到，通常有两个，一个以太网卡，一个本地网卡。
第一个问题，虚拟IP怎么用？网卡是可以绑定多个IP的，通过如下命令绑定到以太网卡上
ifconfig ens192:1 172.23.15.11 netmask 255.255.252.0 broadcast 172.23.3.254 uproute add -host 172.23.15.11 dev ens192:1//ens192:1 为网络别名//netmask 为子网掩码//broadcast 为网关地址 这里我犯了一个低级错误。一开始错把虚拟ip绑定到本地网卡上。结果出现本机是可以ping通这个虚拟ip，但局域网内其他服务器ping不通该ip。
 执行上述命令，其他机器就可以通过172.23.15.11来访问到172.23.15.10 这台机器了。
PS. 卸载虚拟IP命令 ifconfig ens192:1 down</description>
    </item>
    
    <item>
      <title>记一次解决“Telnet不通”问题的经过</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3Telnet%E4%B8%8D%E9%80%9A%E9%97%AE%E9%A2%98%E7%9A%84%E7%BB%8F%E8%BF%87/</link>
      <pubDate>Tue, 17 Mar 2020 10:11:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3Telnet%E4%B8%8D%E9%80%9A%E9%97%AE%E9%A2%98%E7%9A%84%E7%BB%8F%E8%BF%87/</guid>
      <description>记一次解决“Telnet不通”问题的经过#2020-03-17 10:11
有天，两台同一个网段的服务器：18和16，突然就出现18 telnet 不通16 的14267 端口的问题。
这两台服务器的网络是互通的，这是可以保证的。
在网络组同事的提示下，尝试用tcpdump抓包看下什么情况。
在16上使用命令
# tcpdump -i eno16780032 port 14267 and host 172.17.34.18eno16780032 是16上的网口，监听18telnet 14267端口的发送过来数据包
抓包如下，发现18发送数据了，但16并没有响应18。
对比其他服务器telnet 16的14267端口，是三次握手成功的。
用关键词“telnet 服务器 tcpdump 收到请求没有回复”查了一下。发现有个靠谱的博客
linux系统收到SYN但不回SYN+ACK问题排查
对照18、16服务器的时间，发现18比16快了1秒多。 解决方案有两种
 修正时间不准确的服务器 通过把16上的/proc/sys/net/ipv4/tcp_tw_recycle 的内容设置为0即可。  </description>
    </item>
    
    <item>
      <title>Oracle JDBC连接的几种配置写法</title>
      <link>https://cevin15.github.io/docs/%E6%88%91%E7%88%B1%E7%BC%96%E7%A8%8B/Oracle_JDBC%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E9%85%8D%E7%BD%AE%E5%86%99%E6%B3%95/</link>
      <pubDate>Thu, 24 Oct 2019 20:08:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E6%88%91%E7%88%B1%E7%BC%96%E7%A8%8B/Oracle_JDBC%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E9%85%8D%E7%BD%AE%E5%86%99%E6%B3%95/</guid>
      <description>Oracle JDBC连接的几种配置写法#2019-10-24 20:08
今天上线项目的时候，发现Oracle的数据库连接一直有问题，报了这么一个错：
ORA-12505, TNS:listener does not currently know of SID given in connect descriptor 笔者的数据库写法是：jdbc:oracle:thin:@172.253.34.154:1521:eas
这很奇怪，用客户端工具连接是没错的呀。纠结了好一会，突然灵光一闪：客户端工具配置的时候，用的是服务，而不是sid。难道服务跟sid的配置是不一样的？
赶紧查下资料，果然！
如果用的是服务名，配置是这样的：jdbc:oracle:thin:@//172.253.34.154:1521/eas
而如果是sid，则配置是这样的：jdbc:oracle:thin:@172.253.34.154:1521:eas
更新，问题修复！</description>
    </item>
    
    <item>
      <title>Linux 修改DNS 服务器配置</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E4%BF%AE%E6%94%B9DNS_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 04 Jul 2019 09:02:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/Linux_%E4%BF%AE%E6%94%B9DNS_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>Linux 修改DNS 服务器配置#2019-07-04 09:02
最近遇到个坑。
修改DNS 服务器。随便一查，说是改/etc/resolv.conf，加上nameserver xxx.xxx.xxx.xxx即可。话不多说，改之，测试，生效。然后就没多管了。
有一天，服务器重启了，然后DNS 解析失效了！一查，/etc/resolv.conf 之前的配置居然没了。不可思议，仔细一看，文件多了一行# Generated by NetworkManager。猜测是服务器重启之后重置了resolv.conf 文件。一顿查，终于发现修改DNS 服务器的正确姿势。
# 查看配置文件。这个配置文件发现不同的机器上文件名并不一致，比如有些服务器会是`ifcfg-eno16780032`vi /etc/sysconfig/network-scripts/ifcfg-eth0# 添加DNS服务器地址到配置文件中DNS1=114.114.114.114DNS2=8.8.8.8# 重启网络服务service network restart然后再查看/etc/resolv.conf，就会发现DNS配置已经被写进来了。</description>
    </item>
    
    <item>
      <title>CentOS 7.x 扩容</title>
      <link>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/CentOS_7.x_%E6%89%A9%E5%AE%B9/</link>
      <pubDate>Mon, 10 Dec 2018 11:02:43 +0800</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%BF%90%E7%BB%B4/CentOS_7.x_%E6%89%A9%E5%AE%B9/</guid>
      <description>CentOS 7.x 扩容#2018-12-10 11:02
CentOS 增加磁盘之后，还需要对空间进行扩容。
首先查看下系统现在的使用空间，发现只有50G左右。
# df -lh再来看下已挂载的磁盘。
# fdisk -l可以看到这么一个数据，说明现在挂载了一个53.7 GB的磁盘没用上。
Disk /dev/sdb: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes接下来对这个磁盘进行分区。
# fdisk /dev/sdbWelcome to fdisk (util-linux 2.23.2).Changes will remain in memory only, until you decide to write them.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cevin15.github.io/docs/%E6%88%91%E7%88%B1%E7%BC%96%E7%A8%8B/OAuth_2.0_%E6%B5%85%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cevin15.github.io/docs/%E6%88%91%E7%88%B1%E7%BC%96%E7%A8%8B/OAuth_2.0_%E6%B5%85%E6%9E%90/</guid>
      <description>OAuth 2.0 浅析#2021-07-30 15:20</description>
    </item>
    
  </channel>
</rss>
